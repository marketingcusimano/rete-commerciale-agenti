<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CARABOT NATALINO - Dashboard Direzionale</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #e6f0ff 0%, #f0f4ff 50%, #faf5ff 100%);
            color: #374151;
            min-height: 100vh;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        /* Header Card */
        .main-card {
            background: white;
            border-radius: 2rem;
            padding: 2.5rem;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.08);
            margin-bottom: 2rem;
            position: relative;
            overflow: visible;
        }

        .header-content {
            margin-bottom: 2rem;
        }

        .header-title {
            font-size: 3rem;
            font-weight: 900;
            color: #1f2937;
            margin-bottom: 0.5rem;
            letter-spacing: -0.02em;
        }

        .header-subtitle {
            font-size: 1.25rem;
            color: #6b7280;
            font-weight: 500;
            margin-bottom: 1.5rem;
        }

        .status-indicator {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            background: rgba(34, 197, 94, 0.1);
            color: #16a34a;
            padding: 0.5rem 1rem;
            border-radius: 1rem;
            font-size: 0.875rem;
            font-weight: 600;
        }

        .status-dot {
            width: 8px;
            height: 8px;
            background: #16a34a;
            border-radius: 50%;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .header-stats {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 2rem 0;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .stat-item {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            color: #6b7280;
            font-weight: 500;
        }

        .stat-icon {
            width: 20px;
            height: 20px;
            color: #9ca3af;
        }

        /* Action Buttons */
        .action-buttons {
            display: flex;
            gap: 1rem;
            margin-top: 2rem;
        }

        .btn-primary {
            background: #3b82f6;
            color: white;
            border: none;
            padding: 1rem 2rem;
            border-radius: 1rem;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            box-shadow: 0 10px 30px rgba(59, 130, 246, 0.3);
        }

        .btn-primary:hover {
            background: #2563eb;
            transform: translateY(-2px);
            box-shadow: 0 15px 35px rgba(59, 130, 246, 0.4);
        }

        .btn-secondary {
            background: rgba(107, 114, 128, 0.1);
            color: #374151;
            border: none;
            padding: 1rem 2rem;
            border-radius: 1rem;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .btn-secondary:hover {
            background: rgba(107, 114, 128, 0.2);
            transform: translateY(-2px);
        }

        /* Overview Section */
        .overview-section {
            background: white;
            border-radius: 2rem;
            padding: 2.5rem;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.08);
            margin-bottom: 2rem;
        }

        .section-header {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .section-icon {
            width: 60px;
            height: 60px;
            background: #3b82f6;
            border-radius: 1.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.5rem;
        }

        .section-title {
            font-size: 2.5rem;
            font-weight: 800;
            color: #1f2937;
        }

        .section-subtitle {
            font-size: 1.125rem;
            color: #6b7280;
            margin-top: 0.25rem;
        }

        .overview-stats {
            display: flex;
            gap: 2rem;
            margin-bottom: 2rem;
            flex-wrap: wrap;
        }

        .stat-badge {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 1rem 1.5rem;
            background: rgba(34, 197, 94, 0.1);
            color: #16a34a;
            border-radius: 1rem;
            font-weight: 600;
        }

        .stat-badge.blue {
            background: rgba(59, 130, 246, 0.1);
            color: #3b82f6;
        }

        .stat-badge.purple {
            background: rgba(147, 51, 234, 0.1);
            color: #9333ea;
        }

        /* Vista Card */
        .vista-card {
            background: rgba(248, 250, 252, 0.8);
            border-radius: 1.5rem;
            padding: 2rem;
            display: flex;
            align-items: center;
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .vista-icon {
            width: 80px;
            height: 80px;
            background: #3b82f6;
            border-radius: 1.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 2rem;
            flex-shrink: 0;
        }

        .vista-content {
            flex: 1;
        }

        .vista-title {
            font-size: 1.75rem;
            font-weight: 700;
            color: #1f2937;
            margin-bottom: 0.5rem;
        }

        .vista-subtitle {
            color: #6b7280;
            font-size: 1rem;
            margin-bottom: 1rem;
        }

        .vista-stats {
            display: flex;
            gap: 2rem;
        }

        .vista-stat {
            text-align: center;
        }

        .vista-stat-value {
            font-size: 1.25rem;
            font-weight: 700;
            margin-bottom: 0.25rem;
        }

        .vista-stat-value.regions { color: #3b82f6; }
        .vista-stat-value.revenue { color: #16a34a; }

        .vista-stat-label {
            font-size: 0.875rem;
            color: #6b7280;
        }

        .vista-expand {
            color: #6b7280;
            cursor: pointer;
            padding: 0.5rem;
            border-radius: 0.5rem;
            transition: all 0.3s ease;
        }

        .vista-expand:hover {
            background: rgba(107, 114, 128, 0.1);
        }

        /* KPI Grid */
        .kpi-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
            margin-top: 2rem;
        }

        .kpi-card {
            background: white;
            border-radius: 1.5rem;
            padding: 2rem;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
            transition: all 0.3s ease;
        }

        .kpi-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.12);
        }

        .kpi-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 1.5rem;
        }

        .kpi-label {
            font-size: 0.875rem;
            color: #6b7280;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.1em;
            margin-bottom: 1rem;
        }

        .kpi-value {
            font-size: 3rem;
            font-weight: 900;
            color: #1f2937;
            line-height: 1;
        }

        .kpi-badge {
            padding: 0.5rem 1rem;
            border-radius: 1rem;
            font-size: 0.875rem;
            font-weight: 700;
        }

        .kpi-badge.green {
            background: rgba(34, 197, 94, 0.1);
            color: #16a34a;
        }

        .kpi-badge.blue {
            background: rgba(59, 130, 246, 0.1);
            color: #3b82f6;
        }

        .kpi-progress {
            margin: 1.5rem 0;
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: rgba(107, 114, 128, 0.1);
            border-radius: 1rem;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #16a34a, #22c55e);
            border-radius: 1rem;
            transition: width 1s ease;
        }

        .kpi-footer {
            color: #6b7280;
            font-size: 0.875rem;
        }

        /* Charts */
        .chart-container {
            background: white;
            border-radius: 1.5rem;
            padding: 2rem;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
            margin-bottom: 2rem;
        }

        .chart-header {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .chart-icon {
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, #3b82f6, #8b5cf6);
            border-radius: 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.25rem;
        }

        .chart-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: #1f2937;
        }

        .chart-canvas {
            position: relative;
            height: 400px;
        }

        .chart-legend {
            margin-top: 1rem;
            text-align: center;
            font-size: 0.875rem;
            color: #6b7280;
        }

        .legend-item {
            display: inline-flex;
            align-items: center;
            margin: 0 1rem;
        }

        .legend-color {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 0.5rem;
        }

        /* Table */
        .table-container {
            background: white;
            border-radius: 1.5rem;
            padding: 2rem;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
            margin-bottom: 2rem;
        }

        .table-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .table-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: #1f2937;
        }

        .province-selector {
            background: rgba(59, 130, 246, 0.1);
            color: #3b82f6;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .province-selector:hover {
            background: rgba(59, 130, 246, 0.2);
        }

        .data-table {
            width: 100%;
            border-collapse: collapse;
        }

        .data-table th {
            text-align: left;
            padding: 1rem;
            font-weight: 700;
            color: #6b7280;
            border-bottom: 2px solid #f3f4f6;
            font-size: 0.875rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .data-table td {
            padding: 1rem;
            border-bottom: 1px solid #f3f4f6;
        }

        .data-table tr:hover {
            background: rgba(59, 130, 246, 0.05);
        }

        .province-badge {
            display: inline-block;
            padding: 0.25rem 0.75rem;
            border-radius: 0.5rem;
            font-size: 0.75rem;
            font-weight: 700;
            text-transform: uppercase;
        }

        .province-badge.LT {
            background: rgba(139, 92, 246, 0.1);
            color: #8b5cf6;
        }

        .province-badge.RM {
            background: rgba(34, 211, 238, 0.1);
            color: #22d3ee;
        }

        /* Province Popup */
        .popup-overlay {
            position: fixed;
            inset: 0;
            background: rgba(0, 0, 0, 0.5);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            padding: 1rem;
        }

        .popup-overlay.show {
            display: flex;
        }

        .popup-content {
            background: white;
            border-radius: 1.5rem;
            width: 100%;
            max-width: 400px;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.25);
            transform: scale(0.9);
            transition: transform 0.3s ease;
        }

        .popup-overlay.show .popup-content {
            transform: scale(1);
        }

        .popup-header {
            padding: 2rem;
            border-bottom: 1px solid #f3f4f6;
        }

        .popup-title {
            font-size: 1.25rem;
            font-weight: 700;
            color: #1f2937;
            margin-bottom: 0.5rem;
        }

        .popup-subtitle {
            color: #6b7280;
        }

        .popup-body {
            padding: 1.5rem;
        }

        .province-option {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 1rem;
            border-radius: 1rem;
            margin-bottom: 0.75rem;
            cursor: pointer;
            transition: all 0.3s ease;
            background: rgba(248, 250, 252, 0.8);
        }

        .province-option:hover {
            background: rgba(59, 130, 246, 0.1);
        }

        .province-option.selected {
            background: #3b82f6;
            color: white;
        }

        .option-info h4 {
            font-weight: 700;
            margin-bottom: 0.25rem;
        }

        .option-info p {
            font-size: 0.875rem;
            opacity: 0.8;
        }

        .option-radio {
            width: 20px;
            height: 20px;
            border: 2px solid currentColor;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .option-radio.selected::after {
            content: '';
            width: 10px;
            height: 10px;
            background: currentColor;
            border-radius: 50%;
        }

        .popup-footer {
            padding: 1.5rem 2rem;
            border-top: 1px solid #f3f4f6;
            text-align: right;
        }

        /* Loading States */
        .loading-state {
            text-align: center;
            padding: 4rem 2rem;
        }

        .loading-spinner {
            font-size: 3rem;
            color: #3b82f6;
            margin-bottom: 2rem;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        .error-state {
            text-align: center;
            padding: 4rem 2rem;
            background: rgba(239, 68, 68, 0.05);
            border-radius: 1.5rem;
            margin: 2rem 0;
        }

        .error-icon {
            font-size: 3rem;
            color: #ef4444;
            margin-bottom: 1rem;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .container {
                padding: 1rem;
            }

            .header-title {
                font-size: 2rem;
            }

            .action-buttons {
                flex-direction: column;
            }

            .overview-stats {
                flex-direction: column;
                gap: 1rem;
            }

            .vista-card {
                flex-direction: column;
                text-align: center;
            }

            .vista-stats {
                justify-content: center;
            }

            .kpi-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="main-card">
            <div class="header-content">
                <h1 class="header-title">Dashboard Direzionale</h1>
                <p class="header-subtitle">CARABOT NATALINO - Controllo Rete Vendita</p>
                <div class="status-indicator">
                    <div class="status-dot"></div>
                    <span>Aggiornamento automatico attivo</span>
                </div>
            </div>

            <div class="header-stats">
                <div class="stat-item">
                    <i class="fas fa-calendar stat-icon"></i>
                    <span id="date-range">01 Gen - 18 Ago 2025</span>
                </div>
                <div class="stat-item">
                    <i class="fas fa-users stat-icon"></i>
                    <span id="agents-count">4 Agenti Attivi</span>
                </div>
            </div>

            <div class="action-buttons">
                <button class="btn-primary" onclick="showPanoramicaAziendale()">
                    <i class="fas fa-chart-line"></i>
                    Panoramica Aziendale
                </button>
                <button class="btn-secondary" onclick="showDettaglioAgenti()">
                    <i class="fas fa-users"></i>
                    Dettaglio Agenti
                </button>
            </div>
        </div>

        <!-- Loading State -->
        <div id="loading-state" class="main-card loading-state">
            <i class="fas fa-sync-alt loading-spinner"></i>
            <h2>Caricamento dati CSV...</h2>
            <p>Connessione al file dati reale</p>
        </div>

        <!-- Error State -->
        <div id="error-state" class="error-state" style="display: none;">
            <i class="fas fa-exclamation-triangle error-icon"></i>
            <h2>Errore Connessione</h2>
            <p id="error-message"></p>
            <button class="btn-primary" onclick="dashboardManager.fetchCSVData(true)" style="margin-top: 1rem;">
                <i class="fas fa-redo"></i> Riprova
            </button>
        </div>

        <!-- Main Content -->
        <div id="main-content" style="display: none;">
            <!-- Overview Section -->
            <div class="overview-section">
                <div class="section-header">
                    <div class="section-icon">
                        <i class="fas fa-chart-line"></i>
                    </div>
                    <div>
                        <h2 class="section-title">Panoramica Aziendale</h2>
                        <p class="section-subtitle">Analytics e performance rete vendita per territorio</p>
                    </div>
                </div>

                <div class="overview-stats">
                    <div class="stat-badge">
                        <span>3 Regioni Attive</span>
                    </div>
                    <div class="stat-badge blue">
                        <i class="fas fa-users"></i>
                        <span id="total-agents">4 Agenti Totali</span>
                    </div>
                    <div class="stat-badge purple">
                        <i class="fas fa-building"></i>
                        <span id="total-clients">45 Clienti Totali</span>
                    </div>
                </div>

                <!-- Vista Nazionale -->
                <div class="vista-card">
                    <div class="vista-icon">
                        <i class="fas fa-map-marker-alt"></i>
                    </div>
                    <div class="vista-content">
                        <h3 class="vista-title">Vista Nazionale</h3>
                        <p class="vista-subtitle">Panoramica completa tutte le regioni</p>
                        <div class="vista-stats">
                            <div class="vista-stat">
                                <div class="vista-stat-value regions" id="regions-count">3 regioni</div>
                                <div class="vista-stat-label">Territori</div>
                            </div>
                            <div class="vista-stat">
                                <div class="vista-stat-value revenue" id="total-revenue">€203k</div>
                                <div class="vista-stat-label">Fatturato</div>
                            </div>
                        </div>
                    </div>
                    <div class="vista-expand">
                        <i class="fas fa-chevron-down"></i>
                    </div>
                </div>

                <!-- KPI Cards -->
                <div class="kpi-grid">
                    <!-- Fatturato Card -->
                    <div class="kpi-card">
                        <div class="kpi-header">
                            <div>
                                <p class="kpi-label">Fatturato 2025</p>
                                <p class="kpi-value" id="fatturato-value">€0k</p>
                            </div>
                            <div class="kpi-badge green">
                                <i class="fas fa-arrow-up"></i>
                                <span id="growth-value">+0%</span>
                            </div>
                        </div>
                        <div class="kpi-footer">
                            <span>vs 2024: </span>
                            <span id="previous-value" style="font-weight: 700;">€0k</span>
                        </div>
                    </div>

                    <!-- Obiettivo Card -->
                    <div class="kpi-card" id="obiettivo-card">
                        <div class="kpi-header">
                            <div>
                                <p class="kpi-label">Target 2025</p>
                                <p class="kpi-value" id="obiettivo-value">€0k</p>
                            </div>
                            <div class="kpi-badge blue">
                                <span id="obiettivo-percentage">0%</span>
                            </div>
                        </div>
                        <div class="kpi-progress">
                            <div class="progress-bar">
                                <div class="progress-fill" id="progress-fill" style="width: 0%;"></div>
                            </div>
                        </div>
                        <div class="kpi-footer">
                            <span>Rimanente: </span>
                            <span id="remaining-value" style="font-weight: 700;">€0k</span>
                        </div>
                    </div>

                    <!-- Clienti Card -->
                    <div class="kpi-card">
                        <div class="kpi-header">
                            <div>
                                <p class="kpi-label">Clienti Attivi</p>
                                <p class="kpi-value" id="clienti-value">0</p>
                            </div>
                            <div class="kpi-badge blue">
                                <span id="selected-province-label">TOTALE</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Charts -->
            <div class="chart-container">
                <div class="chart-header">
                    <div class="chart-icon">
                        <i class="fas fa-map-marked-alt"></i>
                    </div>
                    <h3 class="chart-title">Fatturato per Provincia</h3>
                </div>
                <div class="chart-canvas">
                    <canvas id="provinceChart"></canvas>
                </div>
                <div class="chart-legend">
                    <span class="legend-item">
                        <span class="legend-color" style="background: #8b5cf6;"></span>
                        Latina
                    </span>
                    <span class="legend-item">
                        <span class="legend-color" style="background: #22d3ee;"></span>
                        Roma
                    </span>
                </div>
            </div>

            <div class="chart-container">
                <div class="chart-header">
                    <div class="chart-icon">
                        <i class="fas fa-crown"></i>
                    </div>
                    <h3 class="chart-title">Top 5 Clienti</h3>
                </div>
                <div class="chart-canvas">
                    <canvas id="topClientsChart"></canvas>
                </div>
                <div class="chart-legend">
                    Top clienti per fatturato - dati dal CSV
                </div>
            </div>

            <!-- Table -->
            <div class="table-container">
                <div class="table-header">
                    <h3 class="table-title">Dettaglio Clienti</h3>
                    <button class="province-selector" id="province-filter">
                        <i class="fas fa-map-marker-alt"></i>
                        <span id="selected-province">TUTTE LE PROVINCE</span>
                    </button>
                </div>

                <table class="data-table">
                    <thead>
                        <tr>
                            <th>Provincia</th>
                            <th>Cliente</th>
                            <th>Categoria</th>
                            <th style="text-align: right;">Fatturato</th>
                        </tr>
                    </thead>
                    <tbody id="vendite-tbody">
                        <!-- Populated by JavaScript -->
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Province Selection Popup -->
        <div id="province-popup" class="popup-overlay">
            <div class="popup-content">
                <div class="popup-header">
                    <h3 class="popup-title">Seleziona Provincia</h3>
                    <p class="popup-subtitle">Filtra dati per territorio</p>
                </div>
                
                <div class="popup-body">
                    <div class="province-option" data-province="all">
                        <div class="option-info">
                            <h4>Tutte le Province</h4>
                            <p id="all-province-desc">€0k • 0 clienti</p>
                        </div>
                        <div class="option-radio"></div>
                    </div>
                    <div class="province-option" data-province="LT">
                        <div class="option-info">
                            <h4>Latina (LT)</h4>
                            <p id="lt-province-desc">€0k • 0 clienti</p>
                        </div>
                        <div class="option-radio"></div>
                    </div>
                    <div class="province-option" data-province="RM">
                        <div class="option-info">
                            <h4>Roma (RM)</h4>
                            <p id="rm-province-desc">€0k • 0 clienti</p>
                        </div>
                        <div class="option-radio"></div>
                    </div>
                </div>
                
                <div class="popup-footer">
                    <button class="btn-secondary" id="close-popup">Chiudi</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        class DashboardManager {
            constructor() {
                this.csvData = null;
                this.selectedProvince = 'all';
                this.isLoading = false;
                this.lastUpdate = null;
                this.updateInterval = null;
                this.charts = {};

                this.csvFileNames = [
                    '631.00238_CARABOT-NATALINO.csv',
                    '631.00238_CARABOT NATALINO.csv'
                ];

                this.init();
            }

            init() {
                this.setupEventListeners();
                this.loadInitialData();
                this.startAutoUpdate();
            }

            setupEventListeners() {
                // Province filter
                document.getElementById('province-filter').addEventListener('click', () => this.showProvincePopup());
                document.getElementById('close-popup').addEventListener('click', () => this.hideProvincePopup());

                // Province options
                document.addEventListener('click', (e) => {
                    if (e.target.closest('.province-option')) {
                        const option = e.target.closest('.province-option');
                        const province = option.dataset.province;
                        this.selectProvince(province);
                    }
                    if (e.target.id === 'province-popup') {
                        this.hideProvincePopup();
                    }
                });
            }

            showProvincePopup() {
                const popup = document.getElementById('province-popup');
                if (popup && this.csvData) {
                    this.updateProvinceOptions();
                    popup.classList.add('show');
                }
            }

            hideProvincePopup() {
                const popup = document.getElementById('province-popup');
                if (popup) {
                    popup.classList.remove('show');
                }
            }

            updateProvinceOptions() {
                if (!this.csvData) return;

                // Update descriptions
                document.getElementById('all-province-desc').textContent = `${this.formatEuroK3(this.csvData.generale.annoCorrente)} • ${this.csvData.generale.clienti} clienti`;
                document.getElementById('lt-province-desc').textContent = `${this.formatEuroK3(this.csvData.latina.annoCorrente)} • ${this.csvData.latina.clientiCorrente} clienti`;
                document.getElementById('rm-province-desc').textContent = `${this.formatEuroK3(this.csvData.roma.annoCorrente)} • ${this.csvData.roma.clienti} clienti`;

                // Update selected state
                document.querySelectorAll('.province-option').forEach(option => {
                    const province = option.dataset.province;
                    const radio = option.querySelector('.option-radio');
                    if (province === this.selectedProvince) {
                        option.classList.add('selected');
                        radio.classList.add('selected');
                    } else {
                        option.classList.remove('selected');
                        radio.classList.remove('selected');
                    }
                });
            }

            selectProvince(province) {
                this.selectedProvince = province;
                
                // Update button text
                const labels = { all: 'TUTTE LE PROVINCE', LT: 'LATINA (LT)', RM: 'ROMA (RM)' };
                document.getElementById('selected-province').textContent = labels[province];
                document.getElementById('selected-province-label').textContent = province === 'all' ? 'TOTALE' : province;

                this.hideProvincePopup();
                this.renderDashboard();
            }

            async loadInitialData() {
                await this.fetchCSVData();
            }

            buildCandidateUrls() {
                const { pathname, origin } = window.location;
                const segs = pathname.split('/').filter(Boolean);
                const repoSlug = segs.length ? segs[0] : '';

                const bases = ['./', '', pathname.endsWith('/') ? pathname : pathname.replace(/[^/]*$/, ''), 
                              repoSlug ? `/${repoSlug}/` : '/', repoSlug ? `/${repoSlug}/docs/` : '/docs/'];

                const urls = [];
                for (const base of bases) {
                    for (const name of this.csvFileNames) {
                        try {
                            urls.push(new URL(base + name, origin).href);
                        } catch { /* ignore */ }
                    }
                }
                return [...new Set(urls)];
            }

            async fetchCSVData(isManual = false) {
                if (this.isLoading) return;

                this.isLoading = true;
                this.updateLoadingState('updating');

                try {
                    const cacheBuster = `?t=${Date.now()}&r=${Math.random()}`;
                    const candidates = this.buildCandidateUrls();
                    let lastError = null;
                    let text = null;

                    for (const url of candidates) {
                        const u = url + cacheBuster;
                        try {
                            const res = await fetch(u, {
                                method: 'GET',
                                cache: 'no-cache',
                                headers: {
                                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                                    'Pragma': 'no-cache'
                                }
                            });
                            if (!res.ok) throw new Error(`HTTP ${res.status}: ${res.statusText}`);
                            const t = await res.text();
                            if (t && t.trim().length > 0) { text = t; break; }
                            lastError = new Error('CSV vuoto');
                        } catch (e) {
                            lastError = e;
                        }
                    }

                    if (!text) throw lastError || new Error('Impossibile caricare CSV');

                    const parsedData = this.parseCSV(text);
                    if (!parsedData) throw new Error('Parsing CSV fallito');

                    this.csvData = parsedData;
                    this.lastUpdate = new Date();
                    this.updateLoadingState('success');
                    this.renderDashboard();

                } catch (error) {
                    console.error('Errore caricamento CSV:', error);
                    this.updateLoadingState('error', error?.message || 'Errore sconosciuto');
                } finally {
                    this.isLoading = false;
                }
            }

            parseCSV(csvText) {
                try {
                    const obiettiviMatch = csvText.match(/=== VERIFICA OBIETTIVI ===([\s\S]*?)===.*===/);
                    if (!obiettiviMatch) throw new Error('Sezione obiettivi non trovata');
                    const obiettiviText = obiettiviMatch[1];

                    const generaleMatch = obiettiviText.match(/Generale;([\d.,]+);([\d.,]+);;;(\d+);(\d+);;/);
                    if (!generaleMatch) throw new Error('Dati Generale non trovati');
                    const generale = {
                        annoPrecedente: this.parseNumber(generaleMatch[1]),
                        annoCorrente: this.parseNumber(generaleMatch[2]),
                        clienti: parseInt(generaleMatch[4], 10)
                    };

                    const ltMatch = obiettiviText.match(/LT;([\d.,]+);([\d.,]+);([\d.,]+);(\d+)%;(\d+);(\d+);(\d+);(\d+)%/);
                    if (!ltMatch) throw new Error('Dati Latina non trovati');
                    const latina = {
                        annoPrecedente: this.parseNumber(ltMatch[1]),
                        annoCorrente: this.parseNumber(ltMatch[2]),
                        obiettivo: this.parseNumber(ltMatch[3]) * 1000,
                        percentualeObiettivo: parseInt(ltMatch[4], 10),
                        clientiPrecedenti: parseInt(ltMatch[5], 10),
                        clientiCorrente: parseInt(ltMatch[6], 10),
                        obiettivoClienti: parseInt(ltMatch[7], 10)
                    };

                    const clientiMatch = csvText.match(/=== CLIENTI PER PROVINCIA ===([\s\S]*?)===.*===/);
                    let roma = { annoCorrente: 0, clienti: 0 };
                    if (clientiMatch) {
                        const clientiText = clientiMatch[1];
                        const rmMatch = clientiText.match(/RM;(\d+);([\d.,]+);;;;;;/);
                        if (rmMatch) {
                            roma = {
                                annoCorrente: this.parseNumber(rmMatch[2]),
                                clienti: parseInt(rmMatch[1], 10)
                            };
                        }
                    }

                    const dettaglioStart = csvText.indexOf('=== DETTAGLIO VENDITE PER CLIENTE ===');
                    const dettaglioEnd = csvText.indexOf('=== RIEPILOGO PER CATEGORIA ===');
                    let vendite = [];
                    if (dettaglioStart !== -1 && dettaglioEnd !== -1) {
                        const dettaglioSection = csvText.substring(dettaglioStart, dettaglioEnd);
                        const lines = dettaglioSection.split('\n').filter(line =>
                            line.trim() && !line.includes('===') && !line.includes('Provincia;Ragione Sociale Cliente') && 
                            line.includes(';') && line.split(';').length >= 4
                        );
                        
                        const venditeMap = new Map();
                        lines.forEach(line => {
                            const parts = line.split(';');
                            if (parts.length >= 4) {
                                const fatturato = this.parseNumber(parts[3]);
                                if (!isNaN(fatturato) && fatturato > 0) {
                                    const cliente = parts[1].trim();
                                    if (!venditeMap.has(cliente) || venditeMap.get(cliente).fatturato < fatturato) {
                                        venditeMap.set(cliente, {
                                            provincia: parts[0].trim(),
                                            cliente: cliente,
                                            categoria: parts[2].trim(),
                                            fatturato: fatturato
                                        });
                                    }
                                }
                            }
                        });
                        vendite = Array.from(venditeMap.values()).sort((a, b) => b.fatturato - a.fatturato).slice(0, 20);
                    }

                    return { generale, latina, roma, vendite, timestamp: new Date() };
                } catch (e) {
                    console.error('Errore parsing CSV:', e);
                    return null;
                }
            }

            parseNumber(input) {
                if (typeof input === 'number') return input;
                if (!input) return 0;
                const cleaned = String(input).replace(/\s+/g, '').replace(/€/g, '').replace(/\./g, '').replace(/,/g, '.');
                const n = Number(cleaned);
                return Number.isFinite(n) ? n : 0;
            }

            formatK3(value) {
                const num = Number(value) || 0;
                const k = Math.abs(num) / 1000;
                if (k >= 100) return (num < 0 ? '-' : '') + Math.round(k) + 'k';
                else if (k >= 10) return (num < 0 ? '-' : '') + (Math.round(k * 10) / 10).toString().replace('.', ',') + 'k';
                else return (num < 0 ? '-' : '') + (Math.round(k * 100) / 100).toString().replace('.', ',') + 'k';
            }

            formatEuroK3(value) {
                return value ? '€' + this.formatK3(value).replace('k', '') + 'k' : '€0k';
            }

            updateLoadingState(state, errorMessage = null) {
                const loadingEl = document.getElementById('loading-state');
                const errorEl = document.getElementById('error-state');
                const mainEl = document.getElementById('main-content');

                if (loadingEl) loadingEl.style.display = 'none';
                if (errorEl) errorEl.style.display = 'none';
                if (mainEl) mainEl.style.display = 'none';

                switch (state) {
                    case 'updating':
                        if (loadingEl) loadingEl.style.display = 'block';
                        break;
                    case 'success':
                        if (mainEl) mainEl.style.display = 'block';
                        break;
                    case 'error':
                        if (errorEl) errorEl.style.display = 'block';
                        const err = document.getElementById('error-message');
                        if (err) err.textContent = errorMessage || 'Errore sconosciuto';
                        break;
                }
            }

            renderDashboard() {
                if (!this.csvData) return;
                this.renderKPICards();
                this.renderVenditeTable();
                this.renderCharts();
            }

            renderKPICards() {
                const data = this.getDisplayData();

                document.getElementById('fatturato-value').textContent = this.formatEuroK3(data.fatturato);
                document.getElementById('growth-value').textContent = '+' + data.crescita + '%';
                document.getElementById('previous-value').textContent = this.formatEuroK3(data.annoPrecedente);
                document.getElementById('clienti-value').textContent = String(data.clienti);
                document.getElementById('total-revenue').textContent = this.formatEuroK3(data.fatturato);
                document.getElementById('total-clients').textContent = data.clienti + ' Clienti Totali';

                if (data.obiettivo) {
                    document.getElementById('obiettivo-value').textContent = this.formatEuroK3(data.obiettivo);
                    document.getElementById('obiettivo-percentage').textContent = (data.percentualeObiettivo || 0) + '%';
                    document.getElementById('remaining-value').textContent = this.formatEuroK3(Math.max(0, data.obiettivo - data.fatturato));
                    
                    const progressFill = document.getElementById('progress-fill');
                    const percentage = Math.min(100, data.percentualeObiettivo || 0);
                    setTimeout(() => {
                        progressFill.style.width = percentage + '%';
                    }, 100);
                } else {
                    document.getElementById('obiettivo-card').style.display = 'none';
                }
            }

            renderVenditeTable() {
                if (!this.csvData.vendite || this.csvData.vendite.length === 0) return;

                const tbody = document.getElementById('vendite-tbody');
                tbody.innerHTML = '';

                let venditeToShow = this.csvData.vendite;
                if (this.selectedProvince !== 'all') {
                    venditeToShow = this.csvData.vendite.filter(v => v.provincia === this.selectedProvince);
                }

                venditeToShow.forEach(vendita => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td><span class="province-badge ${vendita.provincia}">${vendita.provincia}</span></td>
                        <td>${vendita.cliente.length > 40 ? vendita.cliente.slice(0, 40) + '...' : vendita.cliente}</td>
                        <td>${vendita.categoria}</td>
                        <td style="text-align: right; font-weight: 700; color: #16a34a;">${this.formatEuroK3(vendita.fatturato)}</td>
                    `;
                    tbody.appendChild(row);
                });
            }

            renderCharts() {
                if (!this.csvData) return;
                
                setTimeout(() => {
                    this.renderProvinceChart();
                    this.renderTopClientsChart();
                }, 100);
            }

            renderProvinceChart() {
                const ctx = document.getElementById('provinceChart');
                if (!ctx) return;

                if (this.charts.province) {
                    this.charts.province.destroy();
                }

                this.charts.province = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: ['Latina (LT)', 'Roma (RM)'],
                        datasets: [{
                            data: [this.csvData.latina.annoCorrente, this.csvData.roma.annoCorrente],
                            backgroundColor: ['#8b5cf6', '#22d3ee'],
                            borderColor: ['#8b5cf6', '#22d3ee'],
                            borderWidth: 3
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: { display: false },
                            tooltip: {
                                callbacks: {
                                    label: (context) => {
                                        const value = this.formatEuroK3(context.raw);
                                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                        const percentage = ((context.raw / total) * 100).toFixed(1);
                                        return `${context.label}: ${value} (${percentage}%)`;
                                    }
                                }
                            }
                        },
                        cutout: '60%'
                    }
                });
            }

            renderTopClientsChart() {
                const ctx = document.getElementById('topClientsChart');
                if (!ctx) return;

                if (this.charts.topClients) {
                    this.charts.topClients.destroy();
                }

                let clientsToShow = this.csvData.vendite;
                if (this.selectedProvince !== 'all') {
                    clientsToShow = this.csvData.vendite.filter(v => v.provincia === this.selectedProvince);
                }
                
                const topClients = clientsToShow.slice(0, 5);

                this.charts.topClients = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: topClients.map(c => c.cliente.length > 20 ? c.cliente.substring(0, 20) + '...' : c.cliente),
                        datasets: [{
                            data: topClients.map(c => c.fatturato),
                            backgroundColor: '#3b82f6',
                            borderColor: '#3b82f6',
                            borderWidth: 2
                        }]
                    },
                    options: {
                        indexAxis: 'y',
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: { display: false },
                            tooltip: {
                                callbacks: {
                                    label: (context) => this.formatEuroK3(context.raw)
                                }
                            }
                        },
                        scales: {
                            x: {
                                beginAtZero: true,
                                ticks: {
                                    callback: (value) => this.formatK3(value)
                                }
                            }
                        }
                    }
                });
            }

            getDisplayData() {
                if (!this.csvData) {
                    return { fatturato: 0, annoPrecedente: 0, crescita: 0, clienti: 0, obiettivo: null, percentualeObiettivo: null };
                }

                if (this.selectedProvince === 'all') {
                    const prev = this.csvData.generale.annoPrecedente || 0;
                    const curr = this.csvData.generale.annoCorrente || 0;
                    const crescita = prev > 0 ? (((curr - prev) / prev) * 100).toFixed(1) : '0.0';
                    
                    return { 
                        fatturato: curr, 
                        annoPrecedente: prev, 
                        crescita, 
                        clienti: this.csvData.generale.clienti,
                        obiettivo: this.csvData.latina.obiettivo,
                        percentualeObiettivo: this.csvData.latina.percentualeObiettivo
                    };
                } else if (this.selectedProvince === 'LT') {
                    const prev = this.csvData.latina.annoPrecedente || 0;
                    const curr = this.csvData.latina.annoCorrente || 0;
                    const crescita = prev > 0 ? (((curr - prev) / prev) * 100).toFixed(1) : '0.0';
                    
                    return { 
                        fatturato: curr, 
                        annoPrecedente: prev, 
                        crescita, 
                        clienti: this.csvData.latina.clientiCorrente,
                        obiettivo: this.csvData.latina.obiettivo,
                        percentualeObiettivo: this.csvData.latina.percentualeObiettivo
                    };
                } else if (this.selectedProvince === 'RM') {
                    return { 
                        fatturato: this.csvData.roma.annoCorrente, 
                        annoPrecedente: 0, 
                        crescita: '0.0', 
                        clienti: this.csvData.roma.clienti,
                        obiettivo: null,
                        percentualeObiettivo: null
                    };
                }

                return { fatturato: 0, annoPrecedente: 0, crescita: '0.0', clienti: 0, obiettivo: null, percentualeObiettivo: null };
            }

            startAutoUpdate() {
                this.updateInterval = setInterval(() => {
                    this.fetchCSVData();
                }, 5 * 60 * 1000);
            }

            destroy() {
                if (this.updateInterval) clearInterval(this.updateInterval);
                Object.values(this.charts).forEach(chart => {
                    if (chart) chart.destroy();
                });
            }
        }

        // Initialize
        let dashboardManager;
        document.addEventListener('DOMContentLoaded', () => {
            dashboardManager = new DashboardManager();
        });

        window.addEventListener('beforeunload', () => {
            if (dashboardManager) dashboardManager.destroy();
        });

        // Placeholder functions for buttons
        function showPanoramicaAziendale() {
            // Already showing panoramica
        }

        function showDettaglioAgenti() {
            alert('Funzionalità "Dettaglio Agenti" in sviluppo');
        }
    </script>
</body>
</html>
